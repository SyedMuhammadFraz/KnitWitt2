"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
<<<<<<< HEAD
var _utils = require("@mui/utils");
var _TabsUnstyled = require("../TabsUnstyled");
var _useCompoundItem = require("../utils/useCompoundItem");
function tabPanelValueGenerator(otherTabPanelValues) {
  return otherTabPanelValues.size;
}

=======
var _TabsUnstyled = require("../TabsUnstyled");
>>>>>>> main
/**
 *
 * Demos:
 *
 * - [Unstyled Tabs](https://mui.com/base/react-tabs/#hooks)
 *
 * API:
 *
 * - [useTabPanel API](https://mui.com/base/react-tabs/hooks-api/#use-tab-panel)
 */
function useTabPanel(parameters) {
  const {
<<<<<<< HEAD
    value: valueParam,
    id: idParam
  } = parameters;
  const context = (0, _TabsUnstyled.useTabsContext)();
  if (context === null) {
    throw new Error('No TabContext provided');
  }
  const {
    value: selectedTabValue,
    getTabId
  } = context;
  const id = (0, _utils.unstable_useId)(idParam);
  const {
    id: value
  } = (0, _useCompoundItem.useCompoundItem)(valueParam, id, tabPanelValueGenerator);
  const hidden = value !== selectedTabValue;
  const correspondingTabId = value !== undefined ? getTabId(value) : undefined;
  const getRootProps = () => {
    return {
      'aria-labelledby': correspondingTabId != null ? correspondingTabId : undefined,
=======
    value
  } = parameters;
  const context = (0, _TabsUnstyled.useTabContext)();
  if (context === null) {
    throw new Error('No TabContext provided');
  }
  const hidden = value !== context.value;
  const id = (0, _TabsUnstyled.getPanelId)(context, value);
  const tabId = (0, _TabsUnstyled.getTabId)(context, value);
  const getRootProps = () => {
    return {
      'aria-labelledby': tabId != null ? tabId : undefined,
>>>>>>> main
      hidden,
      id: id != null ? id : undefined
    };
  };
  return {
    hidden,
    getRootProps
  };
}
var _default = useTabPanel;
exports.default = _default;