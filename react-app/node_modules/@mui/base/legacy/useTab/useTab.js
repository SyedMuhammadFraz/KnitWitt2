import _extends from "@babel/runtime/helpers/esm/extends";
<<<<<<< HEAD
import * as React from 'react';
import { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';
import { useTabsContext } from '../TabsUnstyled';
import { useCompoundItem } from '../utils/useCompoundItem';
import { useListItem } from '../useList';
import useButton from '../useButton';
function tabValueGenerator(otherTabValues) {
  return otherTabValues.size;
}

=======
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { useTabContext, getTabId, getPanelId } from '../TabsUnstyled';
import useButton from '../useButton';
>>>>>>> main
/**
 *
 * Demos:
 *
 * - [Unstyled Tabs](https://mui.com/base/react-tabs/#hooks)
 *
 * API:
 *
 * - [useTab API](https://mui.com/base/react-tabs/hooks-api/#use-tab)
 */
function useTab(parameters) {
<<<<<<< HEAD
  var valueParam = parameters.value,
    externalRef = parameters.ref,
    _parameters$disabled = parameters.disabled,
    disabled = _parameters$disabled === void 0 ? false : _parameters$disabled,
    idParam = parameters.id;
  var tabRef = React.useRef(null);
  var id = useId(idParam);
  var _useTabsContext = useTabsContext(),
    selectedValue = _useTabsContext.value,
    selectionFollowsFocus = _useTabsContext.selectionFollowsFocus,
    getTabPanelId = _useTabsContext.getTabPanelId;
  var tabMetadata = React.useMemo(function () {
    return {
      disabled: disabled,
      ref: tabRef,
      id: id
    };
  }, [disabled, tabRef, id]);
  var _useCompoundItem = useCompoundItem(valueParam, tabMetadata, tabValueGenerator),
    value = _useCompoundItem.id,
    index = _useCompoundItem.index,
    totalTabsCount = _useCompoundItem.totalItemCount;
  var _useListItem = useListItem({
      item: value
    }),
    getTabProps = _useListItem.getRootProps,
    listItemRefHandler = _useListItem.ref,
    highlighted = _useListItem.highlighted,
    selected = _useListItem.selected;
  var _useButton = useButton({
      disabled: disabled,
      focusableWhenDisabled: !selectionFollowsFocus,
      type: 'button'
    }),
    getButtonProps = _useButton.getRootProps,
    buttonRefHandler = _useButton.ref,
    active = _useButton.active,
    focusVisible = _useButton.focusVisible,
    setFocusVisible = _useButton.setFocusVisible;
  var handleRef = useForkRef(tabRef, externalRef, listItemRefHandler, buttonRefHandler);
  var tabPanelId = value !== undefined ? getTabPanelId(value) : undefined;
  var getRootProps = function getRootProps() {
    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var resolvedTabProps = _extends({}, otherHandlers, getTabProps(otherHandlers));
    var resolvedButtonProps = _extends({}, resolvedTabProps, getButtonProps(resolvedTabProps));
    return _extends({}, resolvedButtonProps, {
      role: 'tab',
      'aria-controls': tabPanelId,
      'aria-selected': selected,
      id: id,
      ref: handleRef
    });
  };
  return {
    getRootProps: getRootProps,
    active: active,
    focusVisible: focusVisible,
    highlighted: highlighted,
    index: index,
    // the `selected` state isn't set on the server (it relies on effects to be calculated),
    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext
    selected: selected || value === selectedValue,
    setFocusVisible: setFocusVisible,
    totalTabsCount: totalTabsCount
  };
=======
  var _getPanelId, _getTabId;
  var valueProp = parameters.value,
    onChange = parameters.onChange,
    onClick = parameters.onClick,
    onFocus = parameters.onFocus;
  var _useButton = useButton(parameters),
    getRootPropsButton = _useButton.getRootProps,
    otherButtonProps = _objectWithoutProperties(_useButton, ["getRootProps"]);
  var context = useTabContext();
  if (context === null) {
    throw new Error('No TabContext provided');
  }
  var value = valueProp != null ? valueProp : 0;
  var selected = context.value === value;
  var selectionFollowsFocus = context.selectionFollowsFocus;
  var a11yAttributes = {
    role: 'tab',
    'aria-controls': (_getPanelId = getPanelId(context, value)) != null ? _getPanelId : undefined,
    id: (_getTabId = getTabId(context, value)) != null ? _getTabId : undefined,
    'aria-selected': selected,
    disabled: otherButtonProps.disabled
  };
  var createHandleFocus = function createHandleFocus(otherHandlers) {
    return function (event) {
      var _otherHandlers$onFocu;
      (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (selectionFollowsFocus && !selected) {
        if (onChange) {
          onChange(event, value);
        }
        context.onSelected(event, value);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
  };
  var createHandleClick = function createHandleClick(otherHandlers) {
    return function (event) {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (!selected) {
        if (onChange) {
          onChange(event, value);
        }
        context.onSelected(event, value);
      }
      if (onClick) {
        onClick(event);
      }
    };
  };
  var getRootProps = function getRootProps() {
    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var buttonResolvedProps = getRootPropsButton(_extends({}, otherHandlers, {
      onClick: createHandleClick(otherHandlers),
      onFocus: createHandleFocus(otherHandlers)
    }));
    return _extends({}, buttonResolvedProps, a11yAttributes);
  };
  return _extends({
    getRootProps: getRootProps
  }, otherButtonProps, {
    selected: selected
  });
>>>>>>> main
}
export default useTab;