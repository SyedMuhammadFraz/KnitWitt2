import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';
<<<<<<< HEAD
import useButton from '../useButton';
import { useListItem } from '../useList';
import { useCompoundItem } from '../utils/useCompoundItem';
=======
import { MenuUnstyledContext } from '../MenuUnstyled';
import useButton from '../useButton';
import useForcedRerendering from '../utils/useForcedRerendering';
>>>>>>> main

/**
 *
 * Demos:
 *
 * - [Unstyled Menu](https://mui.com/base/react-menu/#hooks)
 *
 * API:
 *
 * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)
 */
<<<<<<< HEAD
export default function useMenuItem(params) {
  var _params$disabled = params.disabled,
    disabled = _params$disabled === void 0 ? false : _params$disabled,
    idParam = params.id,
    externalRef = params.ref,
    label = params.label;
  var id = useId(idParam);
  var itemRef = React.useRef(null);
  var itemMetadata = React.useMemo(function () {
    return {
      disabled: disabled,
      id: id != null ? id : '',
      label: label,
      ref: itemRef
    };
  }, [disabled, id, label]);
  var _useListItem = useListItem({
      item: id
    }),
    getListRootProps = _useListItem.getRootProps,
    highlighted = _useListItem.highlighted,
    listItemRefHandler = _useListItem.ref;
  var _useCompoundItem = useCompoundItem(id, itemMetadata),
    index = _useCompoundItem.index,
    totalItemCount = _useCompoundItem.totalItemCount;
  var _useButton = useButton({
      disabled: disabled,
      focusableWhenDisabled: true
    }),
    getButtonProps = _useButton.getRootProps,
    focusVisible = _useButton.focusVisible,
    buttonRefHandler = _useButton.ref;
  var handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);
  React.useDebugValue({
    id: id,
    highlighted: highlighted,
    disabled: disabled,
    label: label
  });

  // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item
  // which does not have access to infortmation about its position or highlighted state.
=======
export default function useMenuItem(props) {
  var _itemState$disabled;
  var _props$disabled = props.disabled,
    disabled = _props$disabled === void 0 ? false : _props$disabled,
    ref = props.ref,
    label = props.label;
  var id = useId();
  var menuContext = React.useContext(MenuUnstyledContext);
  var itemRef = React.useRef(null);
  var handleRef = useForkRef(itemRef, ref);
  if (menuContext === null) {
    throw new Error('MenuItemUnstyled must be used within a MenuUnstyled');
  }
  var registerItem = menuContext.registerItem,
    unregisterItem = menuContext.unregisterItem,
    open = menuContext.open,
    registerHighlightChangeHandler = menuContext.registerHighlightChangeHandler;
  React.useEffect(function () {
    if (id === undefined) {
      return undefined;
    }
    registerItem(id, {
      disabled: disabled,
      id: id,
      ref: itemRef,
      label: label
    });
    return function () {
      return unregisterItem(id);
    };
  }, [id, registerItem, unregisterItem, disabled, ref, label]);
  var _useButton = useButton({
      disabled: disabled,
      focusableWhenDisabled: true,
      ref: handleRef
    }),
    getButtonProps = _useButton.getRootProps,
    focusVisible = _useButton.focusVisible; // Ensure the menu item is focused when highlighted
  var _React$useState = React.useState(false),
    focusRequested = _React$useState[0],
    requestFocus = _React$useState[1];
  var focusIfRequested = React.useCallback(function () {
    if (focusRequested && itemRef.current != null) {
      itemRef.current.focus();
      requestFocus(false);
    }
  }, [focusRequested]);
  React.useEffect(function () {
    focusIfRequested();
  });
  React.useDebugValue({
    id: id,
    disabled: disabled,
    label: label
  });
  var itemState = menuContext.getItemState(id != null ? id : '');
  var _ref = itemState != null ? itemState : {
      highlighted: false
    },
    highlighted = _ref.highlighted;
  var rerender = useForcedRerendering();
  React.useEffect(function () {
    function updateHighlightedState(highlightedItemId) {
      if (highlightedItemId === id && !highlighted) {
        rerender();
      } else if (highlightedItemId !== id && highlighted) {
        rerender();
      }
    }
    return registerHighlightChangeHandler(updateHighlightedState);
  });
  React.useEffect(function () {
    // TODO: this should be handled by the MenuButton
    requestFocus(highlighted && open);
  }, [highlighted, open]);
>>>>>>> main
  if (id === undefined) {
    return {
      getRootProps: function getRootProps() {
        var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _extends({}, otherHandlers, getButtonProps(otherHandlers), {
          role: 'menuitem'
        });
      },
      disabled: false,
      focusVisible: focusVisible,
<<<<<<< HEAD
      highlighted: false,
      index: -1,
      totalItemCount: 0,
      ref: handleRef
    };
  }
  var getRootProps = function getRootProps() {
    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var resolvedButtonProps = _extends({}, otherHandlers, getButtonProps(otherHandlers));
    var resolvedMenuItemProps = _extends({}, resolvedButtonProps, getListRootProps(resolvedButtonProps));
    return _extends({}, otherHandlers, resolvedButtonProps, resolvedMenuItemProps, {
      role: 'menuitem',
      ref: handleRef
    });
  };
  return {
    getRootProps: getRootProps,
    disabled: disabled,
    focusVisible: focusVisible,
    highlighted: highlighted,
    index: index,
    totalItemCount: totalItemCount,
    ref: handleRef
=======
      highlighted: false
    };
  }
  return {
    getRootProps: function getRootProps() {
      var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var optionProps = menuContext.getItemProps(id, otherHandlers);
      return _extends({}, otherHandlers, getButtonProps(otherHandlers), {
        tabIndex: optionProps.tabIndex,
        id: optionProps.id,
        role: 'menuitem'
      });
    },
    disabled: (_itemState$disabled = itemState == null ? void 0 : itemState.disabled) != null ? _itemState$disabled : false,
    focusVisible: focusVisible,
    highlighted: highlighted
>>>>>>> main
  };
}