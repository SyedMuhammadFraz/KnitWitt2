import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
<<<<<<< HEAD
import { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';
import useButton from '../useButton';
import { SelectActionTypes } from './useSelect.types';
import useList from '../useList';
import defaultOptionStringifier from './defaultOptionStringifier';
import { useCompoundParent } from '../utils/useCompound';
import selectReducer from './selectReducer';
=======
import { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';
import useButton from '../useButton';
import useListbox, { defaultListboxReducer, ActionTypes } from '../useListbox';
import defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';
import useSelectChangeNotifiers from './useSelectChangeNotifiers';
>>>>>>> main

/**
 *
 * Demos:
 *
 * - [Unstyled Select](https://mui.com/base/react-select/#hooks)
 *
 * API:
 *
 * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)
 */
function useSelect(props) {
  var buttonRefProp = props.buttonRef,
<<<<<<< HEAD
    _props$defaultOpen = props.defaultOpen,
    defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,
=======
>>>>>>> main
    defaultValueProp = props.defaultValue,
    _props$disabled = props.disabled,
    disabled = _props$disabled === void 0 ? false : _props$disabled,
    listboxIdProp = props.listboxId,
    listboxRefProp = props.listboxRef,
    _props$multiple = props.multiple,
    multiple = _props$multiple === void 0 ? false : _props$multiple,
<<<<<<< HEAD
    onChange = props.onChange,
    onHighlightChange = props.onHighlightChange,
    onOpenChange = props.onOpenChange,
    openProp = props.open,
    optionsParam = props.options,
=======
    _onChange = props.onChange,
    _onHighlightChange = props.onHighlightChange,
    onOpenChange = props.onOpenChange,
    _props$open = props.open,
    open = _props$open === void 0 ? false : _props$open,
    options = props.options,
>>>>>>> main
    _props$optionStringif = props.optionStringifier,
    optionStringifier = _props$optionStringif === void 0 ? defaultOptionStringifier : _props$optionStringif,
    valueProp = props.value;
  var buttonRef = React.useRef(null);
  var handleButtonRef = useForkRef(buttonRefProp, buttonRef);
  var listboxRef = React.useRef(null);
  var listboxId = useId(listboxIdProp);
  var defaultValue;
  if (valueProp === undefined && defaultValueProp === undefined) {
    defaultValue = [];
  } else if (defaultValueProp !== undefined) {
    defaultValue = multiple ? defaultValueProp : [defaultValueProp];
  }
  var value = React.useMemo(function () {
    if (valueProp !== undefined) {
      return multiple ? valueProp : [valueProp];
    }
    return undefined;
  }, [valueProp, multiple]);
<<<<<<< HEAD
  var _useCompoundParent = useCompoundParent(),
    subitems = _useCompoundParent.subitems,
    compoundComponentContextValue = _useCompoundParent.contextValue;
  var options = React.useMemo(function () {
    if (optionsParam != null) {
      return new Map(optionsParam.map(function (option, index) {
        return [option.value, {
          value: option.value,
          label: option.label,
          disabled: option.disabled,
          ref: /*#__PURE__*/React.createRef(),
          id: "".concat(listboxId, "_").concat(index)
        }];
      }));
    }
    return subitems;
  }, [optionsParam, subitems, listboxId]);
=======
  var optionsMap = React.useMemo(function () {
    var map = new Map();
    options.forEach(function (option) {
      map.set(option.value, option);
    });
    return map;
  }, [options]);
>>>>>>> main

  // prevents closing the listbox on keyUp right after opening it
  var ignoreEnterKeyUp = React.useRef(false);

  // prevents reopening the listbox when button is clicked
  // (listbox closes on lost focus, then immediately reopens on click)
  var ignoreClick = React.useRef(false);

  // Ensure the listbox is focused after opening
  var _React$useState = React.useState(false),
    listboxFocusRequested = _React$useState[0],
    requestListboxFocus = _React$useState[1];
  var focusListboxIfRequested = React.useCallback(function () {
    if (listboxFocusRequested && listboxRef.current != null) {
      listboxRef.current.focus();
      requestListboxFocus(false);
    }
  }, [listboxFocusRequested]);
  var handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);
<<<<<<< HEAD
  var _useButton = useButton({
      disabled: disabled,
      ref: handleButtonRef
    }),
    getButtonRootProps = _useButton.getRootProps,
    buttonActive = _useButton.active,
    buttonFocusVisible = _useButton.focusVisible;
  var optionValues = React.useMemo(function () {
    return Array.from(options.keys());
  }, [options]);
  var isItemDisabled = React.useCallback(function (valueToCheck) {
    var _option$disabled;
    var option = options.get(valueToCheck);
    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;
  }, [options]);
  var stringifyOption = React.useCallback(function (valueToCheck) {
    var option = options.get(valueToCheck);
    if (!option) {
      return '';
    }
    return optionStringifier(option);
  }, [options, optionStringifier]);
  var controlledState = React.useMemo(function () {
    return {
      selectedValues: value,
      open: openProp
    };
  }, [value, openProp]);
  var getItemId = React.useCallback(function (itemValue) {
    var _options$get;
    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;
  }, [options]);
  var handleSelectionChange = React.useCallback(function (event, newValues) {
    if (multiple) {
      onChange == null ? void 0 : onChange(event, newValues);
    } else {
      var _newValues$;
      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);
    }
  }, [multiple, onChange]);
  var handleHighlightChange = React.useCallback(function (event, newValue) {
    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);
  }, [onHighlightChange]);
  var handleStateChange = React.useCallback(function (e, field, fieldValue) {
    if (field === 'open') {
      onOpenChange == null ? void 0 : onOpenChange(fieldValue);
      if (fieldValue === false && (e == null ? void 0 : e.type) !== 'blur') {
        var _buttonRef$current;
        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
      }
    }
  }, [onOpenChange]);
  var useListParameters = {
    getInitialState: function getInitialState() {
      var _defaultValue;
      return {
        highlightedValue: null,
        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],
        open: defaultOpen
      };
    },
    getItemId: getItemId,
    controlledProps: controlledState,
    isItemDisabled: isItemDisabled,
    listRef: handleListboxRef,
    onChange: handleSelectionChange,
    onHighlightChange: handleHighlightChange,
    onStateChange: handleStateChange,
    reducerActionContext: React.useMemo(function () {
      return {
        multiple: multiple
      };
    }, [multiple]),
    items: optionValues,
    itemStringifier: stringifyOption,
    selectionMode: multiple ? 'multiple' : 'single',
    stateReducer: selectReducer
  };
  var _useList = useList(useListParameters),
    dispatch = _useList.dispatch,
    getListboxRootProps = _useList.getRootProps,
    listContextValue = _useList.contextValue,
    _useList$state = _useList.state,
    open = _useList$state.open,
    highlightedOption = _useList$state.highlightedValue,
    selectedOptions = _useList$state.selectedValues;
=======
  var _useSelectChangeNotif = useSelectChangeNotifiers(),
    notifySelectionChanged = _useSelectChangeNotif.notifySelectionChanged,
    notifyHighlightChanged = _useSelectChangeNotif.notifyHighlightChanged,
    registerHighlightChangeHandler = _useSelectChangeNotif.registerHighlightChangeHandler,
    registerSelectionChangeHandler = _useSelectChangeNotif.registerSelectionChangeHandler;
>>>>>>> main
  React.useEffect(function () {
    focusListboxIfRequested();
  }, [focusListboxIfRequested]);
  React.useEffect(function () {
    requestListboxFocus(open);
  }, [open]);
  var createHandleMouseDown = function createHandleMouseDown(otherHandlers) {
    return function (event) {
      var _otherHandlers$onMous;
      otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
      if (!event.defaultPrevented && open) {
        ignoreClick.current = true;
      }
    };
  };
  var createHandleButtonClick = function createHandleButtonClick(otherHandlers) {
    return function (event) {
      var _otherHandlers$onClic;
      otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
      if (!event.defaultPrevented && !ignoreClick.current) {
<<<<<<< HEAD
        var action = {
          type: SelectActionTypes.buttonClick,
          event: event
        };
        dispatch(action);
=======
        onOpenChange == null ? void 0 : onOpenChange(!open);
>>>>>>> main
      }
      ignoreClick.current = false;
    };
  };
  var createHandleButtonKeyDown = function createHandleButtonKeyDown(otherHandlers) {
    return function (event) {
      var _otherHandlers$onKeyD;
      otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (event.key === 'Enter') {
        ignoreEnterKeyUp.current = true;
      }
      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
        event.preventDefault();
<<<<<<< HEAD
        dispatch({
          type: SelectActionTypes.buttonArrowKeyDown,
          key: event.key,
          event: event
        });
=======
        onOpenChange == null ? void 0 : onOpenChange(true);
>>>>>>> main
      }
    };
  };
  var createHandleListboxKeyUp = function createHandleListboxKeyUp(otherHandlers) {
    return function (event) {
      var _otherHandlers$onKeyU;
      otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      var closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];
      if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {
<<<<<<< HEAD
        var _buttonRef$current2;
        buttonRef == null ? void 0 : (_buttonRef$current2 = buttonRef.current) == null ? void 0 : _buttonRef$current2.focus();
=======
        var _buttonRef$current;
        buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
>>>>>>> main
      }
      ignoreEnterKeyUp.current = false;
    };
  };
<<<<<<< HEAD
  useEnhancedEffect(function () {
    // Scroll to the currently highlighted option.
    if (highlightedOption != null) {
      var _options$get2;
      var optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;
      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {
        return;
      }
      var listboxClientRect = listboxRef.current.getBoundingClientRect();
      var optionClientRect = optionRef.current.getBoundingClientRect();
      if (optionClientRect.top < listboxClientRect.top) {
        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;
      } else if (optionClientRect.bottom > listboxClientRect.bottom) {
        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;
      }
    }
  }, [highlightedOption, options]);
=======
  var createHandleListboxItemClick = React.useCallback(function (otherHandlers) {
    return function (event) {
      var _otherHandlers$onClic2;
      otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (!multiple) {
        onOpenChange == null ? void 0 : onOpenChange(false);
      }
    };
  }, [multiple, onOpenChange]);
  var createHandleListboxBlur = function createHandleListboxBlur(otherHandlers) {
    return function (event) {
      var _otherHandlers$onBlur;
      otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
      if (!event.defaultPrevented) {
        onOpenChange == null ? void 0 : onOpenChange(false);
      }
    };
  };
  var listboxReducer = React.useCallback(function (state, action) {
    var newState = defaultListboxReducer(state, action);
    switch (action.type) {
      case ActionTypes.keyDown:
        // change selection when listbox is closed
        if ((action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown') && !open && !multiple) {
          return _extends({}, newState, {
            selectedValues: newState.highlightedValue != null ? [newState.highlightedValue] : []
          });
        }
        break;
      case ActionTypes.blur:
      case ActionTypes.setValue:
      case ActionTypes.optionsChange:
        return _extends({}, newState, {
          highlightedValue: newState.selectedValues.length > 0 ? newState.selectedValues[0] : null
        });
      default:
        return newState;
    }
    return newState;
  }, [open, multiple]);
  var _useButton = useButton({
      disabled: disabled,
      ref: handleButtonRef
    }),
    getButtonRootProps = _useButton.getRootProps,
    buttonActive = _useButton.active,
    buttonFocusVisible = _useButton.focusVisible;
  var optionValues = React.useMemo(function () {
    return options.map(function (o) {
      return o.value;
    });
  }, [options]);
  var isOptionDisabled = React.useCallback(function (valueToCheck) {
    var _option$disabled;
    var option = optionsMap.get(valueToCheck);
    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;
  }, [optionsMap]);
  var stringifyOption = React.useCallback(function (valueToCheck) {
    var option = optionsMap.get(valueToCheck);
    if (!option) {
      return '';
    }
    return optionStringifier(option);
  }, [optionsMap, optionStringifier]);
  var useListboxParameters = {
    defaultValue: defaultValue,
    id: listboxId,
    isOptionDisabled: isOptionDisabled,
    listboxRef: handleListboxRef,
    onChange: function onChange(e, newValues) {
      if (multiple) {
        _onChange == null ? void 0 : _onChange(e, newValues);
      } else {
        var _newValues$;
        _onChange == null ? void 0 : _onChange(e, (_newValues$ = newValues[0]) != null ? _newValues$ : null);
      }
    },
    onHighlightChange: function onHighlightChange(e, newValue) {
      _onHighlightChange == null ? void 0 : _onHighlightChange(e, newValue != null ? newValue : null);
    },
    options: optionValues,
    optionStringifier: stringifyOption,
    selectionLimit: multiple ? null : 1,
    stateReducer: listboxReducer,
    value: value
  };
  var _useListbox = useListbox(useListboxParameters),
    getListboxRootProps = _useListbox.getRootProps,
    getListboxOptionProps = _useListbox.getOptionProps,
    getOptionState = _useListbox.getOptionState,
    highlightedOption = _useListbox.highlightedOption,
    selectedOption = _useListbox.selectedOption;
  React.useEffect(function () {
    notifySelectionChanged(selectedOption);
  }, [selectedOption, notifySelectionChanged]);
  React.useEffect(function () {
    notifyHighlightChanged(highlightedOption);
  }, [highlightedOption, notifyHighlightChanged]);
>>>>>>> main
  var getButtonProps = function getButtonProps() {
    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {
      onClick: createHandleButtonClick(otherHandlers),
      onMouseDown: createHandleMouseDown(otherHandlers),
      onKeyDown: createHandleButtonKeyDown(otherHandlers)
    })), {
      role: 'combobox',
      'aria-expanded': open,
      'aria-haspopup': 'listbox',
      'aria-controls': listboxId
    });
  };
<<<<<<< HEAD
  var getOptionMetadata = React.useCallback(function (optionValue) {
    return options.get(optionValue);
  }, [options]);
  var getListboxProps = function getListboxProps() {
    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _extends({}, getListboxRootProps(_extends({}, otherHandlers, {
      onKeyUp: createHandleListboxKeyUp(otherHandlers)
    })), {
      id: listboxId,
      role: 'listbox',
      'aria-multiselectable': multiple ? 'true' : undefined
    });
  };
  React.useDebugValue({
    selectedOptions: selectedOptions,
=======
  var getListboxProps = function getListboxProps() {
    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return getListboxRootProps(_extends({}, otherHandlers, {
      onBlur: createHandleListboxBlur(otherHandlers),
      onKeyUp: createHandleListboxKeyUp(otherHandlers)
    }));
  };
  var getOptionProps = React.useCallback(function (optionValue) {
    var otherHandlers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return getListboxOptionProps(optionValue, _extends({}, otherHandlers, {
      onClick: createHandleListboxItemClick(otherHandlers)
    }));
  }, [getListboxOptionProps, createHandleListboxItemClick]);
  React.useDebugValue({
    selectedOption: selectedOption,
>>>>>>> main
    highlightedOption: highlightedOption,
    open: open
  });
  var contextValue = React.useMemo(function () {
<<<<<<< HEAD
    return _extends({}, listContextValue, compoundComponentContextValue);
  }, [listContextValue, compoundComponentContextValue]);
  var selectValue;
  if (props.multiple) {
    selectValue = selectedOptions;
  } else {
    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;
=======
    return {
      listboxRef: listboxRef,
      getOptionProps: getOptionProps,
      getOptionState: getOptionState,
      registerHighlightChangeHandler: registerHighlightChangeHandler,
      registerSelectionChangeHandler: registerSelectionChangeHandler
    };
  }, [getOptionProps, getOptionState, registerHighlightChangeHandler, registerSelectionChangeHandler]);
  if (props.multiple) {
    return {
      buttonActive: buttonActive,
      buttonFocusVisible: buttonFocusVisible,
      disabled: disabled,
      getButtonProps: getButtonProps,
      getListboxProps: getListboxProps,
      contextValue: contextValue,
      open: open,
      value: selectedOption,
      highlightedOption: highlightedOption
    };
>>>>>>> main
  }
  return {
    buttonActive: buttonActive,
    buttonFocusVisible: buttonFocusVisible,
    disabled: disabled,
<<<<<<< HEAD
    dispatch: dispatch,
    getButtonProps: getButtonProps,
    getListboxProps: getListboxProps,
    getOptionMetadata: getOptionMetadata,
    contextValue: contextValue,
    open: open,
    options: optionValues,
    value: selectValue,
=======
    getButtonProps: getButtonProps,
    getListboxProps: getListboxProps,
    contextValue: contextValue,
    open: open,
    value: selectedOption.length > 0 ? selectedOption[0] : null,
>>>>>>> main
    highlightedOption: highlightedOption
  };
}
export default useSelect;